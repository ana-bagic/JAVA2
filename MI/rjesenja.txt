1.
INodeVisitor:
public void visitIfEvenNode(IfEvenNode node);

public class IfEvenNode extends Node {

	private ElementVariable var;
	
	public IfEvenNode(ElementVariable var) {
		this.var = var;
	}
	
	public ElementVariable getVar() {
		return var;
	}
	
	@Override
	public void accept(INodeVisitor visitor) {
		visitor.visitIfEvenNode(this);
	}

	@Override
	public String toStringFancy() {
		// ovo sam pisala u zadaci da vidim kako je isparsirano ali necu sada pisati
		return null;
	}

}

SmartScriptEngine:
		@Override
		public void visitIfEvenNode(IfEvenNode node) {
			String var = node.getVar().getName();
			ValueWrapper variable = multistack.peek(var);
			
			int value = Integer.parseInt(variable.getValue().toString());
			
			if(value % 2 == 0) {
				for(int i = 0; i < node.numberOfChildren(); i++) {
					node.getChild(i).accept(this);
				}
			}
		}

SmartScriptParser, solveInsideTag():
case "IFEVEN" -> {
					IfEvenNode node = solveInsideIfEvenTag();
					((Node) stack.peek()).addChildNode(node);
					stack.push(node);
					return;
				}

SmartScriptParser:
	private IfEvenNode solveInsideIfEvenTag() {
		ElementVariable variable;
		Token token = lexer.nextToken();
		
		if(token.getType() == TokenType.VARIABLE)
			variable = new ElementVariable(token.getValue().toString());
		else
			throw new SmartScriptParserException("First element of the IFEVEN tag has to be a variable.");

		token = lexer.nextToken();
		
		if(token.getType() == TokenType.CLOSETAG) {
			lexer.setState(LexerState.TEXT);
		} else {
			throw new SmartScriptParserException("Too many arguments in IFEVEN tag, should be only one.");
		}
		
		return new IfEvenNode(variable);
	}

dodala sam i brojevi.smscr u scripts

/****************************************************************/

2.
glasanjeRez2.jsp:
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" session="true"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
  <title>Results 2</title>
  <style type="text/css">
 	table.rez td {text-align: center;}
  </style>
</head>
<body style="background-color:#<%= session.getAttribute("pickedBgCol") %>">
  <h1>Results of the voting (2):</h1>
  <p>These are the results of voting!</p>
  <table border="1" class="rez">
  <thead>
    <tr>
      <th>Band</th>
      <th>Number of votes</th>
    </tr>
  </thead>
  <tbody>
  	<c:forEach items="${BANDS}" var="band">
      <tr>
        <td>${band.getName()}</td>
        <td>${band.getVotes()}</td>
      </tr>
    </c:forEach>
  </tbody>
  </table>
  <br>
  <form action="glasanje-rezultati2">
  <label for="sort">Choose result sorting:</label>
  <select id="sort" name="sort">
    <option value="abcAsc">Alphabetically ascending</option>
    <option value="abcDesc">Alphabetically descending</option>
    <option value="voteAsc">Votes ascending</option>
    <option value="voteDesc" selected="selected">Votes descending</option>
  </select>
  <input type="submit" value="Submit">
</form>
</body>
</html>

@WebServlet(urlPatterns = "/glasanje-rezultati2")
public class GlasanjeRezultati2Servlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		Comparator<Band> byName = (b1, b2) -> b1.getName().compareTo(b2.getName());
		Comparator<Band> byVotes = (b1, b2) -> b1.getVotes().compareTo(b2.getVotes());
		
		List<Band> bands = BandsUtil.getBands(req);
		Map<Integer, Integer> votes = BandsUtil.getVotes(req);
		
		bands.forEach(b -> b.setVotes(votes.get(b.getId())));
		
		String sorting = req.getParameter("sort");
		
		if(sorting == null) {
			sorting = "voteDesc";
		}
		
		switch (sorting) {
		case "abcAsc" -> bands.sort(byName);
		case "abcDesc" -> bands.sort(byName.reversed());
		case "voteAsc" -> bands.sort(byVotes);
		case "voteDesc" -> bands.sort(byVotes.reversed());
		default -> bands.sort(byVotes.reversed());
		}
		
		req.setAttribute("BANDS", bands);
		req.getRequestDispatcher("/WEB-INF/pages/glasanjeRez2.jsp").forward(req, resp);
	}
}